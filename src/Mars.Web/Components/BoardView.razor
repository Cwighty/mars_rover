@using System.Text
@inject Game game

<h3>Surface Map</h3>

<style>
    .gridboard {
        display: grid;
        grid-template-columns: @gridTemplateColumns;
        grid-template-rows: @gridTemplateRows;
        gap: 0px 0px;
        background-color:darksalmon;
        grid-template-areas: @gridTemplateAreas()
    }

    @cellClasses()
</style>

@for (int row = 0; row < game.Board.Width; row++)
{
    @for (int col = 0; col < game.Board.Height; col++)
    {
        @if (locations.ContainsKey((row, col)))
        {
            <RoverView Row="row" Column="col" PlayerName="locations[(row, col)].Name" />
        }
    }
}

<div class="gridboard">
    @for (int row = 0; row < game.Board.Width; row++)
    {
        @for (int col = 0; col < game.Board.Height; col++)
        {
            var cell = game.Board[row, col];
            <div class=@($"r{row}c{col} border")>
                @cell.Difficulty.Value
            </div>
        }
    }
</div>

@code {
    [CascadingParameter]
    public SharedState SharedState{  get;  set; }

    protected override void OnInitialized()
    {
        game.GameStateChanged += (_, _) => InvokeAsync(() =>
        {
            refresh();
        });
        refresh();
    }

    private void refresh()
    {
        locations.Clear();
        foreach (var item in game.Board.RoverLocations)
        {
            locations.Add((item.Value.Row, item.Value.Column), item.Key);
        }
        StateHasChanged();
    }

    public string gridTemplateRows => String.Join(" ", Enumerable.Repeat("1fr", game.Board.Width));
    public string gridTemplateColumns => String.Join(" ", Enumerable.Repeat("1fr", game.Board.Height));

    public string gridTemplateAreas()
    {
        var sb = new StringBuilder();
        for(int row=0;row<game.Board.Width;row++)
        {
            sb.Append("\"");
            for(int col=0;col<game.Board.Height;col++)
            {
                sb.Append($"r{row}c{col} ");
            }
            sb.AppendLine("\"");
        }
        return sb.ToString();
    }

    public string cellClasses()
    {
        var sb = new StringBuilder();
        for(int row=0;row<game.Board.Width;row++)
        {
            for(int col=0;col<game.Board.Height;col++)
            {
                sb.AppendLine($".r{row}c{col} {{grid-area: r{row}c{col};}} ");
            }
        }
        return sb.ToString();
    }

    Dictionary<(int row, int col), Player> locations = new();

}
