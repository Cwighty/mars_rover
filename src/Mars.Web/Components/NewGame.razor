@inject ILogger<NewGame> logger
@inject IConfiguration config
@inject MultiGameHoster multiGameHoster
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.DependencyInjection.Extensions

<div class="modal" id="optionsModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">New Game</h3>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <label class="input-label float-start">Select a map</label>
                    </div>
                </div>
                <div class="row mb-2">
                    <InputRadioGroup Name="mapNumber" @bind-Value=mapNumber>
                        @foreach (var map in multiGameHoster.ParsedMaps.Take(MaxMaps))
                        {
                            <div class="form-check mx-3">
                                <InputRadio Value="@map.MapNumber" class="form-check-input" id=@($"map{map.MapNumber}") />
                                <label class="form-check-label float-start" for=@($"map{map.MapNumber}")>Map #@map.MapNumber</label>
                            </div>
                        }
                    </InputRadioGroup>

                </div>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="targets" placeholder="Target Locations" @bind=TargetLocations />
                    <label for="targets">Target Coordinates</label>
                    <span id="errorSpan" style="color: red">@errorText</span>
                </div>
                <div class="form-floating mb-3">
                    <input class="form-control" type="number" id="startingBatteryLevel" placeholder="width" @bind=creationOptions.StartingBatteryLevel />
                    <label for="startingBatteryLevel">Starting Battery Level</label>
                </div>
                <div class="form-floating mb-3">
                    <input class="form-control" type="password" id="password" placeholder="what's the magic word?" @bind=Password @bind:event="oninput" />
                    <label for="password">Password</label>
                </div>
                <div class="modal-footer">
                    <div class="col-auto">
                        <button class="btn btn-link" type="button" id="restartGameButton" data-bs-dismiss="modal" hidden="@startGameButtonHidden" @onclick=makeNewGame>Restart Game</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<button type="button" class="btn btn-link" style="margin-right: -12px; margin-left: -12px;" data-bs-toggle="modal" data-bs-target="#optionsModal">Restart Game</button>

@code {
    [CascadingParameter(Name = "GameManager")]
    public GameManager? gameManager { get; set; }

    int MaxMaps = 3;

    private GameCreationOptions creationOptions => gameManager!.GameStartOptions;

    bool startGameButtonHidden = true;
    int mapNumber;
    string errorText = string.Empty;

    protected override void OnParametersSet()
    {
        mapNumber = multiGameHoster.ParsedMaps.First().MapNumber;

        if (!int.TryParse(config["MaxMaps"], out MaxMaps))
            MaxMaps = 3;

        targetLocations = targetsToString(creationOptions.MapWithTargets.Targets);
    }

    private string targetsToString(IEnumerable<Location> targets)
    {
        return string.Join("; ", targets.Select(t => $"({t.X}, {t.Y})"));
    }

    private string? password;
    public string? Password
    {
        get => password;
        set
        {
            password = value;
            startGameButtonHidden = (password != config["GAME_PASSWORD"]);
            StateHasChanged();
        }
    }

    private string? targetLocations;
    public string? TargetLocations
    {
        get => targetLocations;
        set
        {
            errorText = string.Empty;
            try
            {
                MapWithTargets.ParseLocations(value);
                targetLocations = value;
            }
            catch(Exception ex)
            {
                errorText = ex.Message;
            }
        }
    }


    void makeNewGame()
    {
        errorText = string.Empty;

        if (gameManager == null)
            return;

        if (password != config["GAME_PASSWORD"])
        {
            logger.LogWarning("What?!  How did they click the button with a password mismatch?");
            return;
        }

        try
        {
            creationOptions.MapWithTargets = new MapWithTargets(multiGameHoster.ParsedMaps.Single(m => m.MapNumber == mapNumber), targetLocations);
        }
        catch(InvalidFormatException ex)
        {
            errorText = ex.Message;
            return;
        }
        logger.LogInformation("Starting new game with {options}", creationOptions);
        gameManager.StartNewGame(creationOptions);
    }

}
