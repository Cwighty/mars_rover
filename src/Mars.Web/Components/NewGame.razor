@inject ILogger<NewGame> logger
@inject IConfiguration config
@inject MultiGameHoster multiGameHoster
@using Microsoft.Extensions.DependencyInjection.Extensions

<div class="modal" id="optionsModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">New Game</h3>
            </div>
            <div class="modal-body">
                <div class="form-floating mb-3">
                    <input class="form-control" type="number" id="mapNumber" placeholder="width" @bind=mapNumber />
                    <label for="mapNumber">Map Number</label>
                </div>
                <p>Put in radio buttons for each of the available maps!</p>
                <div class="form-floating mb-3">
                    <input class="form-control" type="password" id="password" placeholder="what's the magic word?" @bind=Password @bind:event="oninput" />
                    <label for="password">Password</label>
                </div>
                <div class="modal-footer">
                    <div class="col-auto">
                        <button class="btn btn-link" type="button" data-bs-dismiss="modal" hidden="@startGameButtonHidden" @onclick=makeNewGame>Restart Game</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<button type="button" class="btn btn-link" style="margin-right: -12px; margin-left: -12px;" data-bs-toggle="modal" data-bs-target="#optionsModal">Restart Game</button>

@code {
    [CascadingParameter(Name = "GameManager")]
    public GameManager? gameManager { get; set; }

    private GameStartOptions startOptions => gameManager!.GameStartOptions;

    bool startGameButtonHidden = true;
    int mapNumber;

    private string? password;
    public string? Password
    {
        get => password;
        set
        {
            password = value;
            startGameButtonHidden = (password != config["GAME_PASSWORD"]);
            StateHasChanged();
        }
    }

    void makeNewGame()
    {
        if (gameManager == null)
            return;

        if (password != config["GAME_PASSWORD"])
        {
            logger.LogWarning("What?!  How did they click the button with a password mismatch?");
            return;
        }

        logger.LogInformation("Starting new game with {options}", startOptions);
        gameManager.StartNewGame(startOptions);
    }

}
